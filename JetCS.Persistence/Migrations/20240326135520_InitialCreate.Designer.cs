// <auto-generated />
using System;
using EntityFrameworkCore.Jet.Metadata;
using JetCS.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JetCS.Persistence.Migrations
{
    [DbContext(typeof(JetCSDbContext))]
    [Migration("20240326135520_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Jet:ValueGenerationStrategy", JetValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("JetCS.Domain.Database", b =>
                {
                    b.Property<int>("DatabaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("counter")
                        .HasAnnotation("Jet:ValueGenerationStrategy", JetValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("longchar");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DatabaseId");

                    b.ToTable("Databases");
                });

            modelBuilder.Entity("JetCS.Domain.DatabaseLogin", b =>
                {
                    b.Property<int>("DatabaseLoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("counter")
                        .HasAnnotation("Jet:ValueGenerationStrategy", JetValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DatabaseId")
                        .HasColumnType("integer");

                    b.Property<int>("LoginId")
                        .HasColumnType("integer");

                    b.HasKey("DatabaseLoginId")
                        .HasName("PrimaryKey");

                    b.HasIndex("LoginId");

                    b.HasIndex(new[] { "DatabaseId", "LoginId" }, "DatabaseLogin")
                        .IsUnique();

                    b.ToTable("DatabaseLogins");
                });

            modelBuilder.Entity("JetCS.Domain.Login", b =>
                {
                    b.Property<int>("LoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("counter")
                        .HasAnnotation("Jet:ValueGenerationStrategy", JetValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool?>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("No");

                    b.Property<string>("LoginName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginId")
                        .HasName("PrimaryKey");

                    b.HasIndex(new[] { "LoginName" }, "uniqlogin")
                        .IsUnique();

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("JetCS.Domain.DatabaseLogin", b =>
                {
                    b.HasOne("JetCS.Domain.Database", "Database")
                        .WithMany("DatabaseLogins")
                        .HasForeignKey("DatabaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("DatabasesDatabaseLogins");

                    b.HasOne("JetCS.Domain.Login", "Login")
                        .WithMany("DatabaseLogins")
                        .HasForeignKey("LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("LoginsDatabaseLogins");

                    b.Navigation("Database");

                    b.Navigation("Login");
                });

            modelBuilder.Entity("JetCS.Domain.Database", b =>
                {
                    b.Navigation("DatabaseLogins");
                });

            modelBuilder.Entity("JetCS.Domain.Login", b =>
                {
                    b.Navigation("DatabaseLogins");
                });
#pragma warning restore 612, 618
        }
    }
}
